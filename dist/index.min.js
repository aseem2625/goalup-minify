#!/usr/bin/env node
"use strict";var commander=require("commander"),chalk=require("chalk"),gulp=require("gulp"),gulpBabel=require("gulp-babel"),gulpUglify=require("gulp-uglify"),gulpAutoprefixer=require("gulp-autoprefixer"),gulpCleanCss=require("gulp-clean-css"),gulpHtmlmin=require("gulp-htmlmin"),gulpImagemin=require("gulp-imagemin");function normalizeArray(e,r){for(var t=0,i=e.length-1;0<=i;i--){var s=e[i];"."===s?e.splice(i,1):".."===s?(e.splice(i,1),t++):t&&(e.splice(i,1),t--)}if(r)for(;t--;t)e.unshift("..");return e}var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,splitPath=function(e){return splitPathRe.exec(e).slice(1)};function resolve(){for(var e="",r=!1,t=arguments.length-1;-1<=t&&!r;t--){var i=0<=t?arguments[t]:"/";if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");i&&(e=i+"/"+e,r="/"===i.charAt(0))}return(r?"/":"")+(e=normalizeArray(filter(e.split("/"),function(e){return!!e}),!r).join("/"))||"."}function normalize(e){var r=isAbsolute(e),t="/"===substr(e,-1);return(e=normalizeArray(filter(e.split("/"),function(e){return!!e}),!r).join("/"))||r||(e="."),e&&t&&(e+="/"),(r?"/":"")+e}function isAbsolute(e){return"/"===e.charAt(0)}function join(){return normalize(filter(Array.prototype.slice.call(arguments,0),function(e,r){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))}function relative(e,r){function t(e){for(var r=0;r<e.length&&""===e[r];r++);for(var t=e.length-1;0<=t&&""===e[t];t--);return t<r?[]:e.slice(r,t-r+1)}e=resolve(e).substr(1),r=resolve(r).substr(1);for(var i=t(e.split("/")),s=t(r.split("/")),o=Math.min(i.length,s.length),n=o,l=0;l<o;l++)if(i[l]!==s[l]){n=l;break}var a=[];for(l=n;l<i.length;l++)a.push("..");return(a=a.concat(s.slice(n))).join("/")}var sep="/",delimiter=":";function dirname(e){var r=splitPath(e),t=r[0],i=r[1];return t||i?(i&&(i=i.substr(0,i.length-1)),t+i):"."}function basename(e,r){var t=splitPath(e)[2];return r&&t.substr(-1*r.length)===r&&(t=t.substr(0,t.length-r.length)),t}function extname(e){return splitPath(e)[3]}var path={extname:extname,basename:basename,dirname:dirname,sep:sep,delimiter:delimiter,relative:relative,join:join,isAbsolute:isAbsolute,normalize:normalize,resolve:resolve};function filter(e,r){if(e.filter)return e.filter(r);for(var t=[],i=0;i<e.length;i++)r(e[i],i,e)&&t.push(e[i]);return t}var substr="b"==="ab".substr(-1)?function(e,r,t){return e.substr(r,t)}:function(e,r,t){return r<0&&(r=e.length+r),e.substr(r,t)},htmlminOpts={caseSensitive:!0,collapseWhitespace:!0,collapseInlineTagWhitespace:!0,decodeEntities:!0,minifyJS:!0,minifyCSS:!0,preserveLineBreaks:!0,removeComments:!0,removeRedundantAttributes:!0},uglifyOpts={compress:{drop_console:!0,dead_code:!1,drop_console:!0,join_vars:!0,collapse_vars:!0},output:{braces:!0,quote_style:1,comments:"some"},mangle:{toplevel:!0}},htmlminOpts_1=htmlminOpts,uglifyOpts_1=uglifyOpts,options={htmlminOpts:htmlminOpts_1,uglifyOpts:uglifyOpts_1},config={},workingDir=process.cwd();function handleError(e){console.log(chalk.bold.red(JSON.stringify(e))),this.emit("end")}function logger(e){return function(){console.log(chalk.bold.green(JSON.stringify(e)))}}function script(){return gulp.src([path.join(workingDir,config.script,"/**/**.js"),config.excludePath],{sourcemaps:!0}).pipe(gulpBabel({presets:["@babel/env"],plugins:[["@babel/plugin-proposal-decorators",{legacy:!0}],["@babel/plugin-proposal-class-properties",{loose:!0}],"@babel/transform-runtime"]}).on("error",handleError)).pipe(gulpUglify(options.uglifyOpts).on("error",handleError)).pipe(gulp.dest(path.join(workingDir,config.basePath,config.script))).on("end",logger("...JS compressed")).on("error",handleError)}function style(){return gulp.src([path.join(workingDir,config.style,"/**/**.css"),config.excludePath]).pipe(gulpAutoprefixer({browsers:["last 2 versions"],cascade:!0}).on("error",handleError)).pipe(gulpCleanCss().on("error",handleError)).pipe(gulp.dest(path.join(workingDir,config.basePath,config.style))).on("end",logger("...CSS compressed")).on("error",handleError)}function html(){return gulp.src([path.join(workingDir,config.html,"/**/**.html"),config.excludePath]).pipe(gulpHtmlmin(options.htmlminOpts).on("error",handleError)).pipe(gulp.dest(path.join(workingDir,config.basePath,config.html))).on("end",logger("...HTML compressed")).on("error",handleError)}function image(){return gulp.src([path.join(workingDir,config.image,"/**/**.+(png|jpg|gif|svg)"),config.excludePath]).pipe(gulpImagemin({interlaced:!0,optimizationLevel:3,progressive:!0}).on("error",handleError)).pipe(gulp.dest(path.join(workingDir,config.basePath,config.image))).on("end",logger("...IMAGES compressed")).on("error",handleError)}function registerBasePaths(e){config.basePath=e.base,e.script&&(config.script=e.script),e.style&&(config.style=e.style),e.html&&(config.html=e.html),e.image&&(config.image=e.image),config.excludePath=path.join("!",workingDir,config.basePath,"{,/**}")}function start(){for(var e=arguments.length,r=Array(e),t=0;t<e;t++)r[t]=arguments[t];var i=r.filter(function(e){return"function"==typeof e});return gulp.parallel(i)}var script_1=script,style_1=style,html_1=html,image_1=image,registerBasePaths_1=registerBasePaths,start_1=start,gulp_1={script:script_1,style:style_1,html:html_1,image:image_1,registerBasePaths:registerBasePaths_1,start:start_1},DEFAULT_PATH="/";function lib(e){console.log(chalk.bold.cyan("Processing...",JSON.stringify(e)));var r={base:e.dest||"public/"};e.js&&(r.script="boolean"==typeof e.js?DEFAULT_PATH:e.js),e.css&&(r.style="boolean"==typeof e.css?DEFAULT_PATH:e.css),e.html&&(r.html="boolean"==typeof e.html?DEFAULT_PATH:e.html),e.image&&(r.image="boolean"==typeof e.image?DEFAULT_PATH:e.image),gulp_1.registerBasePaths(r),(e.js||e.css||e.html||e.image)&&gulp_1.start(e.js&&gulp_1.script,e.css&&gulp_1.style,e.html&&gulp_1.html,e.image&&gulp_1.image)()}var lib_1=lib;commander.version("1.0.2").description("goalup-minify automates your work of compressing js, css, html and image files when build tool is not integrated in your project."),commander.option("--js [path]","Path for js files. Default path is working directory. If option is missing, no .js is processed.").option("--css [path]","Path for css files. Default path is  working directory. If option is missing, no .css is processed.").option("--image <path>","Path for image files. Default path is working directory. If option is missing, no images are proccessed").option("--html [path]","Path for html files. Default path is working directory. If option is missing, no .html is processed").option("-x --exclude <files>","List of files to be excluded from the process.").option("-o --only <files>","Only these files will be compresssed. Used it independent of all above options.").option("-d, --dest <dest_path>",'Path to output all processed files. By default "/public" directory is created in working directory. Output path cannot be same as current working directory.').action(function(e){lib_1({js:e.js,css:e.css,html:e.html,image:e.image,exclude:e.exclude,only:e.only,dest:e.dest})}),commander.parse(process.argv);var goalupMinify={};module.exports=goalupMinify;
